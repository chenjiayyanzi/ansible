#using the ansible command, ansible allows admin to run sd-hoc commands
ansible multi -a "hostname"

#add argument -f 1 to tell ansible to use only one fork
ansible multi -a "hostname" -f 1

#check disk
ansible multi -a "df -h"

#check memory
ansible multi -a "free -m"

#check time
ansible multi -a "date"


@list of all the environment details
ansible [host-or-group] -m setup

#install ntp service 
#-b alias for sudo
#if user account requires a sudo password, you should pass -K also
ansible multi -b -m yum -a "name=ntp state=present"

#start ntpd service
ansible multi -b -m service -a "name=ntpd state=started enabled=yes"

#start/stop/status of service
ansible multi -b -a "service ntpd start/stop/status"

#install django in app servers
ansible app -b -m yum -a "name=MySQL-python state=present"
ansible app -b -m yum -a "name=python-setuptools state=present"
ansible app -b -m easy_install -a "name=django state=present"
#last command was failed because servers use python 2.7 
#so refer to python_pb.yml
ansible-playbook python_pb.yml
#but after that it doesnt work with ansible....
#so let add one line in hosts file, for example /etc/ansible/hosts
ansible_python_interpreter=/usr/bin/python2.7


ansible db -b -m yum -a "name=mariadb-server state=present"
ansible db -b -m service -a "name=mariadb state=started enabled=yes"
#deleting existing rules
ansible db -b -a "iptables -F"
ansible db -b -a "iptables -A INPUT -s 192.168.60.0/24 -p tcp -m tcp --dport 3306 -j ACCEPT"


#--limit argument to limit the command to a specific host
ansible app -b -a "service ntpd restart" --limit "192.168.60.4"

#add user and group 
ansible multi -b -m group -a "name=admin state=present"
ansible multi -b -m user -a "name=jiayu group=admin createhome=yes"
#remove a user
ansible multi -b -m user -a "name=jiayu state=absent remove=yes"

#get information about a file
ansible multi -m stat -a "path=/etc/ansible/hosts"
#copy file from local machine to servers
ansible multi -m copy -a "src=/etc/hosts dest=/tmp/hosts"

#fetch module: files will be copied down to the local machine
ansible multi -b -m fetch -a "src=/etc/hosts dest=/tmp

#create directory
ansible multi -m file -a "dest=/tmp/test mode=664 state=directory"
ansible multi -m file -a "dest=/tmp/test state=absent" #delete directory
ansible multi -m file -a "src=/erc/symlink dest=/des/symlink owner=root group=root state=link"

#check log files
#if you filter output from a command run via ansible, you need to use
#the shell module instead of ansible's default command module
ansible multi -b -m shell -a "tail /var/log/messages | grep ansible|wc -l"


#manage cron job
ansible multi -b -m cron -a "name=daily-cron hour=4 job=/path/tp/daily-script.sh"
#remove cron job
ansible multi -b -m cron -a "name=daily-cron state=absent"


#deploy with git, the git module lets you specify a branch, tag,
#or even a specific commit with the version parameter
ansible app -s -m git -a "repo=git://example.com/path/to/repo.git \ dest=/opt/myapp update=yes version=1.2.4"


