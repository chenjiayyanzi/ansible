              Ansible-playbook Commands
==========================================================================
#check mode: is just a simulation
ansible-playbook python_pb.yml --check

# you can use ansible-lint to run a detail check of your playbook 
ansible-lint verify-apache.yml

# to check the syntax of a playbook, wth the --syntax-check flag
ansible-playbook playbook.yml --syntax-check

#limit the hosts
ansible-playbook playbook.yml --limit webservers
#if you want to see a list of hosts that would be affected by your playbook
#before you actually run ,use --list-hosts
ansible-playbook playbook.yml --list-hosts

#you can define a remote user to use for remote plays
ansible-playbook playbook.yml --remote-user=john

#sometimes you need to pass along your sudo password to the remote
#server to perform commands via sudo, you use the -K option
#you can also explicitly force all tasks in a playbook to use
#sudo with --become
ansible-playbook playbook.yml --become --become-user=janedoe -K

#run with time command 
time ansible-playbook ntp_playbook.yml

#run with variables
ansible-playbook motd_playbook.yml -e "motd=Testing through command line argument"

#run with external variable files
ansible-playbook playbook.yml -e @extra_vars_file.yml


                    Ansible playbook yaml file section
====================================================================================
---
#YAML file begins with the document separator ---

#The minus in YAML indicates a list item. The playbook contains a list of play,
#with each play being a dictionary.
-

  #Target: where our play will run and options it will run with
  hosts: app
  user: vagrant
  gather_facts: false


  #Variable:variables that will apply to the play, on all target systems
  vars: 
    motd: "Welcome to APP server - Ansible"
  #to load in variables from a separate vars.yml file
  vars_files:
    - vars.yml

  #Task: the list of tasks that will be executed within the playbook
  tasks:
    - name: Configure a MOTD, Message of the day
      copy: 
        content: {{ motd }}
        dest: /etc/motd
      notify: MOTD changed


  #handlers: notify actions are triggerd at the end of each block of tasks
  #restarting two service when the contents of a file change
  handlers:
    - name: MOTD changed
      debug:
        msg: The MOTD has changed.


        another example of task and handler 
-----------------------------------------------------------------------------
  tasks:
    - name: template configuration file
      template: 
        src: template.j2
        dest: /etc/foo.conf
      notify:
        - restart memcached
        - restart apache

  handlers:
    - name: restart memcached
      service: 
        name: memcached
        state: restarted
      listen: "restart web services"
    - name: restart apache
      service: 
        name: apache
        state: restarted
      listen: "restart web services"

-------------------------------------------------------------------------

  #Roles: list of roles to be imported into the play
  #Roles are ways of automatically loading certain vars_files,tasks and 
  #handlers based on a known file structue
  #Role directory structure: example project structure
  #site.yml
  #webservers.yml
  #fooservers.yml
  #roles/
  #    common/
  #        tasks/
  #        handlers/
  #        files/
  #        templates/
  #        vars/
  #        defaults/
  #        meta/
  #    webservers/
  #        tasks/
  #        defaults/
  #        meta/
  #when in use, each directory must contain a main.yml file
  #tasks - contains the main list of tasks to be executed by the role.
  #handlers - contains handlers, which may be used by this role or even anywhere outside this role.
  #defaults - default variables for the role (see Using Variables for more information).
  #vars - other variables for the role (see Using Variables for more information).
  #files - contains files which can be deployed via this role.
  #templates - contains templates which can be deployed via this role.
  #meta - defines some meta data for this role. See below for more details

#three dots indicate the end of the YAML file
...


===================================================================================

#resue files and organize things, three ways to do this:
#includes, imports and roles
#includes and imports allow users to break up large playbook into smaller
#files,which can be used acrosss multiple parent playbook
#roles allow more than just tasks to be packaged together can can include 
#variables, handlers, even modules and other plugins
#roles can be uploaded and shared via Ansible Galaxy

#All import* statements are pre-processed at the time playbook are parsed
#All include* statements are processed during the execution of the playbook
#importing playbook:
-import_playbook: webservers.yml
#including and importing task files:
tasks:
- import_tasks: common_tasks.yml
- include_tasks: common_tasks.yml

handlers:
- include_tasks: more_hanlders.yml
- import_tasks: more_handlers.yml
