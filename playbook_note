#check mode: is just a simulation
ansible-playbook python_pb.yml --check

#limit the hosts
ansible-playbook playbook.yml --limit webservers
#if you want to see a list of hosts that would be affected by your playbook
#before you actually run ,use --list-hosts
ansible-playbook playbook.yml --list-hosts

#you can define a remote user to use for remote plays
ansible-playbook playbook.yml --remote-user=john

#sometimes you need to pass along your sudo password to the remote
#server to perform commands via sudo, you use the -K option
#you can also explicitly force all tasks in a playbook to use
#sudo with --become
ansible-playbook playbook.yml --become --become-user=janedoe -K

#to load in variables from a separate vars.yml file
vars_files:
 - vars.yml

#handlers: notify actions are triggerd at the end of each block of tasks
#in a play, will only be triggered once even if notified by multople
#different tasks
#restarting two service when the contents of a file change
- name: template configuration file
  template: 
    src: template.j2
    dest: /etc/foo.conf
  notify:
    - restart memcached
    - restart apache

#handler section:if nothing notifies a handler, it will not run
handlers:
   - name: restart memcached
   service: 
     name: memcached
     state: restarted
   listen: "restart web services"
   - name: restart apache
   service: 
     name: apache
     state: restarted
   listen: "restart web services"

#handlers can also listen to topics, and tasks can notify those topics
tasks:
  - name: restart everything 
    command: echo " this task will restart the web service"
    notify: "restart web services"

# you can use ansible-lint to run a detail check of your playbook 
ansible-lint verify-apache.yml

# to check the syntax of a playbook, wth the --syntax-check flag
ansible-playbook playbook.yml --syntax-check

#resue files and organize things, three ways to do this:
#includes, imports and roles
#includes and imports allow users to break up large playbook into smaller
#files,which can be used acrosss multiple parent playbook
#roles allow more than just tasks to be packaged together can can include 
#variables, handlers, even modules and other plugins
#roles can be uploaded and shared via Ansible Galaxy

#All import* statements are pre-processed at the time playbook are parsed
#All include* statements are processed during the execution of the playbook
#importing playbook:
-import_playbook: webservers.yml
#including and importing task files:
tasks:
- import_tasks: common_tasks.yml
- include_tasks: common_tasks.yml

handlers:
- include_tasks: more_hanlders.yml
- import_tasks: more_handlers.yml

# Roles are ways of automatically loading certain vars_files,tasks and 
# handlers based on a known file structue
#Role directory structure: example project structure
#site.yml
#webservers.yml
#fooservers.yml
#roles/
#    common/
#        tasks/
#        handlers/
#        files/
#        templates/
#        vars/
#        defaults/
#        meta/
#    webservers/
#        tasks/
#        defaults/
#        meta/
#when in use, each directory must contain a main.yml file
#tasks - contains the main list of tasks to be executed by the role.
#handlers - contains handlers, which may be used by this role or even anywhere outside this role.
#defaults - default variables for the role (see Using Variables for more information).
#vars - other variables for the role (see Using Variables for more information).
#files - contains files which can be deployed via this role.
#templates - contains templates which can be deployed via this role.
#meta - defines some meta data for this role. See below for more details

#the classic way to yse roles is via the roles:
---
- hosts: webservers
  roles:
    - common
    - webservers


